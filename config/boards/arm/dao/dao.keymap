/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 800  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20   // 10

#include <dt-bindings/zmk/mouse.h>

#define ENG 0
#define ENN 1
#define NUE 2
#define RUS 3
#define RUN 4
#define NUR 5
#define FUN 6
#define MED 7
#define MOS 8

#define U_TO_RUS_SCUT LC(LA(N2))
#define U_TO_ENG_SCUT LC(LA(N1))

#define U_TAPPING_TERM 200
#define U_QUICK_TAP 0
#define U_STREAK_DECAY 125

#define LEFT_HAND_KEYS   \
     0  1  2  3  4  5    \
    12 13 14 15 16 17    \
    24 25 26 27 28 29

#define RIGHT_HAND_KEYS  \
                          6  7  8  9 10 11 \
                         18 19 20 21 22 23 \
                         30 31 32 33 34 35

#define LEFT_THUMB_KEYS  \
             36 37 38 

#define RIGHT_THUMB_KEYS \
                         39 40 41

&lt { 
    flavor = "balanced";
    tapping-term-ms = <U_TAPPING_TERM>;
    quick-tap-ms = <U_QUICK_TAP>; 
};
&mt { 
    flavor = "balanced";
    tapping-term-ms = <U_TAPPING_TERM>;
    quick-tap-ms = <U_QUICK_TAP>; 
};

&mmv {
    acceleration-exponent = <1>;  // 1
    time-to-max-speed-ms = <300>; // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};
&msc {
    acceleration-exponent = <1>;  // 0
    time-to-max-speed-ms = <40>;  // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
        behaviors {
            lsht: left_shift_tap {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
                hold-trigger-on-release; // for combining HRMs
                tapping-term-ms = <U_TAPPING_TERM>;
                quick-tap-ms = <U_QUICK_TAP>;
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>;
            };
            lmt: left_mod_tap {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
                hold-trigger-on-release; // for combining HRMs
                tapping-term-ms = <U_TAPPING_TERM>;
                quick-tap-ms = <U_QUICK_TAP>;
                require-prior-idle-ms = <U_STREAK_DECAY>;
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>;
            };
            rsht: right_shift_tap {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
                hold-trigger-on-release; // for combining HRMs
                tapping-term-ms = <U_TAPPING_TERM>;
                quick-tap-ms = <U_QUICK_TAP>;
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>;
            };
            rmt: right_mod_tap {
                compatible = "zmk,behavior-hold-tap";
                flavor = "balanced";
                hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
                hold-trigger-on-release; // for combining HRMs
                tapping-term-ms = <U_TAPPING_TERM>;
                quick-tap-ms = <U_QUICK_TAP>;
                require-prior-idle-ms = <U_STREAK_DECAY>;
                #binding-cells = <2>;
                bindings = <&kp>, <&kp>;
            };
            
            collp: colemak_lpar {
                compatible = "zmk,behavior-mod-morph";
                label = "COLEMAK_LEFT_PARENTHESIS";
                #binding-cells = <0>;
                bindings = <&kp LPAR>, <&kp SEMI>;
                mods = <(MOD_RSFT)>;
            };
            colrp: colemak_rpar {
                compatible = "zmk,behavior-mod-morph";
                label = "COLEMAK_RIGHT_PARENTHESIS";
                #binding-cells = <0>;
                bindings = <&kp RPAR>, <&kp COLON>;
                mods = <(MOD_LSFT)>;
            };
            dikm: diktor_m {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_M";
                #binding-cells = <0>;
                bindings = <&kp M>, <&kp W>;
                mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
                keep-mods = <(MOD_RCTL|MOD_RALT|MOD_RGUI)>;
            };
            dsoft: diktor_soft {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_SOFT_HARD_SIGN";
                #binding-cells = <0>;
                bindings = <&dikm>, <&kp RBKT>;
                mods = <(MOD_RSFT)>;
            };
            dbsoft: diktor_big_soft {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_BIG_SOFT_HARD_SIGN";
                #binding-cells = <0>;
                bindings = <&kp RS(M)>, <&kp RBRC>;
                mods = <(MOD_RSFT)>;
            };
            dcomma: diktor_comma {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COMMA_QUESTION_MARK";
                #binding-cells = <0>;
                bindings = <&kp QMARK>, <&kp AMPS>;
                mods = <(MOD_RSFT)>;
            };
            ddot: diktor_dot {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_DOT_EXCLAMATION_MARK";
                #binding-cells = <0>;
                bindings = <&kp SLASH>, <&kp EXCL>;
                mods = <(MOD_RSFT)>;
            };
            // Ctrl-<И> to Ctrl-R
            dikb: diktor_b {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_B";
                #binding-cells = <0>;
                bindings = <&kp B>, <&kp R>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            mtdb: mod_tap_dikb {
                compatible = "zmk,behavior-hold-tap";
                label = "MOD_TAP_DIKTOR_B";
                flavor = "balanced";
                hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
                hold-trigger-on-release; // for combining HRMs
                tapping-term-ms = <U_TAPPING_TERM>;
                quick-tap-ms = <U_QUICK_TAP>;
                require-prior-idle-ms = <U_STREAK_DECAY>;
                #binding-cells = <2>;
                bindings = <&kp>, <&dikb>;
            };
            // Ctrl-<Е> to Ctrl-S
            dikt: diktor_t {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_T";
                #binding-cells = <0>;
                bindings = <&kp T>, <&kp S>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            mtdt: mod_tap_dikt {
                compatible = "zmk,behavior-hold-tap";
                label = "MOD_TAP_DIKTOR_T";
                flavor = "balanced";
                hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
                hold-trigger-on-release; // for combining HRMs
                tapping-term-ms = <U_TAPPING_TERM>;
                quick-tap-ms = <U_QUICK_TAP>;
                #binding-cells = <2>;
                bindings = <&kp>, <&dikt>;
            };
            // Ctrl-<Э> to Ctrl-X
            dikapos: diktor_apos {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_APOS";
                #binding-cells = <0>;
                bindings = <&kp APOS>, <&kp X>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // Ctrl-<Х> to Ctrl-C
            diklbkt: diktor_lbkt {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_LBKT";
                #binding-cells = <0>;
                bindings = <&kp LBKT>, <&kp C>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // Ctrl-<Ю> to Ctrl-V
            dikdot: diktor_dot_oo {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_DOT";
                #binding-cells = <0>;
                bindings = <&kp DOT>, <&kp V>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // Ctrl-<Ф> to Ctrl-Z
            dika: diktor_a {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_A";
                #binding-cells = <0>;
                bindings = <&kp A>, <&kp Z>;
                mods = <(MOD_RCTL)>;
                keep-mods = <(MOD_RCTL)>;
            };
            // (Alt|Ctrl)-<Я> to (Alt|Ctrl)-F
            dikz: diktor_z {
                compatible = "zmk,behavior-mod-morph";
                label = "DIKTOR_COL_MODS_FOR_Z";
                #binding-cells = <0>;
                bindings = <&kp Z>, <&kp F>;
                mods = <(MOD_RALT|MOD_RCTL)>;
                keep-mods = <(MOD_RALT|MOD_RCTL)>;
            };
            // Numeric . or ,
            numdorc: numeric_dot_or_comma {
                compatible = "zmk,behavior-mod-morph";
                label = "NUMERIC_DOT_OR_COMMA";
                #binding-cells = <0>;
                bindings = <&kp DOT>, <&kp COMMA>;
                mods = <(MOD_RSFT)>;
            };
            // Russian Numeric . or ,
            rnumdorc: russian_numeric_dot_or_comma {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_DOT_OR_COMMA";
                #binding-cells = <0>;
                bindings = <&kp SLASH>, <&kp QMARK>;
                mods = <(MOD_RSFT)>;
            };
            rnumscol: russian_numeric_semicolon {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_SEMICOLON";
                #binding-cells = <0>;
                bindings = <&kp DOLLAR>, <&kp CARET>;
                mods = <(MOD_RSFT)>;
            };
            rnumlbr: russian_numeric_left_brace {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_LEFT_BRACE";
                #binding-cells = <0>;
                bindings = <&engkp LEFT_BRACKET>, <&engkp LEFT_BRACE>;
                mods = <(MOD_RSFT)>;
            };
            rnumrbr: russian_numeric_right_brace {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_RIGHT_BRACE";
                #binding-cells = <0>;
                bindings = <&engkp RIGHT_BRACKET>, <&engkp RIGHT_BRACE>;
                mods = <(MOD_RSFT)>;
            };
            rnumabr: russian_numeric_angle_brackets {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_ANGLE_BRACKETS";
                #binding-cells = <0>;
                bindings = <&engkp LESS_THAN>, <&engkp GREATER_THAN>;
                mods = <(MOD_RSFT)>;
            };
            rnumat: russian_numeric_at {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_AT_SIGN";
                #binding-cells = <0>;
                bindings = <&engkp AT_SIGN>, <&engkp HASH>;
                mods = <(MOD_RSFT)>;
            };
            rnumgrv: russian_numeric_grave {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_GRAVE";
                #binding-cells = <0>;
                bindings = <&engkp GRAVE>, <&engkp TILDE>;
                mods = <(MOD_RSFT)>;
            };
            rnum1: russian_numeric_1 {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_1";
                #binding-cells = <0>;
                bindings = <&kp N1>, <&engkp SINGLE_QUOTE>;
                mods = <(MOD_RSFT)>;
            };
            rnum4: russian_numeric_4 {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_4";
                #binding-cells = <0>;
                bindings = <&kp N4>, <&engkp DOLLAR>;
                mods = <(MOD_RSFT)>;
            };
            rnum6: russian_numeric_6 {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_6";
                #binding-cells = <0>;
                bindings = <&kp N6>, <&engkp CARET>;
                mods = <(MOD_RSFT)>;
            };
            rnum7: russian_numeric_7 {
                compatible = "zmk,behavior-mod-morph";
                label = "RUS_NUMERIC_7";
                #binding-cells = <0>;
                bindings = <&kp N7>, <&engkp AMPERSAND>;
                mods = <(MOD_RSFT)>;
            };
        };

        macros {
            ZMK_MACRO(to_russian,
                wait-ms = <20>;
                tap-ms = <20>;
                bindings = <&macro_tap &kp U_TO_RUS_SCUT>, <&macro_tap &tog RUS>;
            )
            ZMK_MACRO(to_english,
                wait-ms = <20>;
                tap-ms = <20>;
                bindings = <&macro_tap &kp U_TO_ENG_SCUT>, <&macro_tap &tog RUS>;
            )
            engkp: english_kp {
                compatible = "zmk,behavior-macro-one-param";
                wait-ms = <20>;
                tap-ms = <20>;
                #binding-cells = <1>;
                bindings 
                    = <&macro_tap &kp U_TO_ENG_SCUT>
                    , <&macro_param_1to1>
                    , <&macro_tap &kp MACRO_PLACEHOLDER>
                    , <&macro_tap &kp U_TO_RUS_SCUT>
                    ;
            };
        };
        
        combos {
            compatible = "zmk,combos";
            combo_rus {
                timeout-ms = <50>;
                key-positions = <38 39>;
                layers = <ENG>;
                bindings = <&to_russian>;
                require-prior-idle-ms = <300>;
            };
            combo_eng {
                timeout-ms = <50>;
                key-positions = <38 39>;
                layers = <RUS>;
                bindings = <&to_english>;
                require-prior-idle-ms = <300>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                english_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |   [   |   Q   |   W   |   F   |   P   |   B   |     |   J   |   L   |   U   |   Y   |   "   |   ]   |
// |  (/;  |   A   |   R   |   S   |   T   |   G   |     |   M   |   N   |   E   |   I   |   O   |  )/:  |
// |   `   |   Z   |   X   |   C   |   D   |   V   |     |   K   |   H   |   ,   |   .   |   /   |   \   |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  MED  |  BKSP |  RET  |     |  TAB  | SPACE |  MED  |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &kp LBKT  &kp Q         &kp W         &kp F         &kp P             &kp B         &kp J         &kp L            &kp U         &kp Y        &kp SQT       &kp RBKT       
          &collp    &lmt LGUI A   &lmt LALT R   &lsht LSHFT S &lmt LCTRL T      &kp G         &kp M         &rmt RCTRL N     &rsht RSHFT E &rmt RALT I  &rmt RGUI O   &colrp
          &kp GRAVE &kp Z         &kp X         &kp C         &kp D             &kp V         &kp K         &kp H            &kp COMMA     &kp DOT      &kp FSLH      &kp BSLH
                                            &mo MED   &lt ENN BSPC   &lt MOS RET   &lt FUN TAB   &lt NUE SPACE   &mo MED
                        >;
                };
                english_nav_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  ESC  | CAPS  |  RUS  |       |       |     | PG_UP | HOME  |  UP   |  END  |  INS  |       |
// |       |  LGUI | LALT  | LSHFT | LCTRL |       |     | PG_DN | LEFT  | DOWN  | RIGHT |  DEL  |       |
// |       |       |       |       |       |       |     |       |       | MENU  |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |  TAB  | SPACE |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp ESC       &kp CAPS      &to_russian   &tog RUS          &none         &kp PG_UP     &kp HOME         &kp UP        &kp END      &kp INS       &none
          &none     &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL         &none         &kp PG_DN     &kp LEFT         &kp DOWN      &kp RIGHT    &kp DEL       &none
          &none     &none         &none         &none         &none             &none         &none         &none            &kp K_CMENU   &none        &none         &none
                                            &none     &none          &none         &kp TAB       &kp SPACE       &none
                        >;
                };
                english_number_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |   [   |   7   |   8   |   9   |   ]   |     |       |       |       |       |  ESC  |       |
// |       |   ;   |   4   |   5   |   6   |   =   |     |  BKSP | RCTRL | RSHFT |  RALT |  RGUI |       |
// |       |   `   |   1   |   2   |   3   |   \   |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  ./,  |   0   |   -   |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp LBKT      &kp N7        &kp N8        &kp N9            &kp RBKT      &none         &none             &none         &none      &kp ESC        &none           
          &none     &kp SEMI      &kp N4        &kp N5        &kp N6            &kp EQUAL     &kp BSPC      &kp RCTRL         &kp RSHFT     &kp RALT   &kp RGUI       &none
          &none     &kp GRAVE     &kp N1        &kp N2        &kp N3            &kp BSLH      &none         &none             &none         &none      &none          &none
                                            &numdorc  &kp N0         &kp MINUS    &none         &none           &none
                        >;
                };
                russian_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |   Ё   |   Ц   |  ь/ъ  |   Я   |  ,/?  |  ./!  |     |   З   |   В   |   К   |   Д   |   Ч   |   Ш   |
// |  Ь/Ъ  |   У   |   И   |   Е   |   О   |   А   |     |   Л   |   Н   |   Т   |   С   |   Р   |   Й   |
// |   \   |   Ф   |   Э   |   Х   |   Ы   |   Ю   |     |   Б   |   М   |   П   |   Г   |   Ж   |   Щ   |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  MED  |  BKSP |  RET  |     |  TAB  | SPACE |  MED  |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &kp GRAVE &kp W         &dsoft        &dikz         &dcomma           &ddot         &kp P         &kp D            &kp R         &kp L        &kp X         &kp I       
          &dbsoft   &lmt LGUI E   &mtdb LALT B  &mtdt LSHFT T &lmt LCTRL J      &kp F         &kp K         &rmt RCTRL Y     &rsht RSHFT N &rmt RALT C  &rmt RGUI H   &kp Q
          &kp BSLH  &dika         &dikapos      &diklbkt      &kp S             &dikdot       &kp COMMA     &kp V            &kp G         &kp U        &kp SEMI      &kp O
                                            &mo MED   &lt RUN BSPC   &lt MOS RET   &lt FUN TAB   &lt NUR SPACE   &mo MED
                        >;
                };
                russian_nav_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  ESC  | CAPS  |  ENG  |       |       |     | PG_UP | HOME  |  UP   |  END  |  INS  |       |
// |       |  LGUI | LALT  | LSHFT | LCTRL |       |     | PG_DN | LEFT  | DOWN  | RIGHT |  DEL  |       |
// |       |       |       |       |       |       |     |       |       | MENU  |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |  TAB  | SPACE |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp ESC       &kp CAPS      &to_english   &tog RUS          &none         &kp PG_UP     &kp HOME         &kp UP        &kp END      &kp INS       &none
          &none     &kp LGUI      &kp LALT      &kp LSHFT     &kp LCTRL         &none         &kp PG_DN     &kp LEFT         &kp DOWN      &kp RIGHT    &kp DEL       &none
          &none     &none         &none         &none         &none             &none         &none         &none            &kp K_CMENU   &none        &none         &none
                                            &none     &none          &none         &kp TAB       &kp SPACE       &none
                        >;
                };
                russian_number_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |  </>  |  [/{  |  7/&  |   8   |   9   |  ]/}  |     |       |       |       |       |  ESC  |       |
// |  @/#  |  ;/:  |  4/$  |   5   |  6/^  |   =   |     |  BKSP | RCTRL | RSHFT |  RALT |  RGUI |       |
// |       |  `/~  |  1/'  |   2   |   3   |   \   |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |  ./,  |   0   |   -   |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &rnumabr  &rnumlbr      &rnum7        &kp N8        &kp N9            &rnumrbr      &none         &none             &none         &none      &kp ESC        &none
          &rnumat   &rnumscol     &rnum4        &kp N5        &rnum6            &kp EQUAL     &kp BSPC      &kp RCTRL         &kp RSHFT     &kp RALT   &kp RGUI       &none
          &none     &rnumgrv      &rnum1        &kp N2        &kp N3            &kp BSLH      &none         &none             &none         &none      &none          &none
                                            &rnumdorc &kp N0         &kp MINUS    &none         &none           &none
                        >;
                };

                function_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  F12  |  F7   |  F8   |  F9   | PSCRN |     |       |       |       |       |  ESC  |       |
// |       |  F11  |  F4   |  F5   |  F6   | SLCK  |     |       | RCTRL | RSHFT |  RALT |  RGUI |       |
// |       |  F10  |  F1   |  F2   |  F3   | PAUSE |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |  BKSP |  RET  |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none     &kp F12       &kp F7        &kp F8        &kp F9            &kp PSCRN       &none       &none             &none         &none       &kp ESC        &none   
          &none     &kp F11       &kp F4        &kp F5        &kp F6            &kp SLCK        &none       &kp RCTRL         &kp RSHFT     &kp RALT    &kp RGUI       &none
          &none     &kp F10       &kp F1        &kp F2        &kp F3            &kp PAUSE_BREAK &none       &none             &none         &none       &none          &none
                                            &none      &kp BSPC      &kp RET      &none         &none           &none
                        >;
                };
                media_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// | BOOTL |       |       |  OUT  |  BLE  |  USB  |     | STOP  |  P/P  | VOL+  |       |       | BOOTL |
// | BTCLR |  BT0  |  BT1  |  BT2  |  BT3  |  BT4  |     |       |   <<  | VOL-  |  >>   |       |       |
// | RESET |  DC0  |  DC1  |  DC2  |  DC3  |  DC4  |     |       |       | MUTE  |       |       | RESET |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |       |       |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &bootloader   &none          &none          &out OUT_TOG   &out OUT_BLE   &out OUT_USB   &kp C_STOP     &kp C_PP       &kp C_VOL_UP   &none          &none          &bootloader
          &bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none          &kp C_PREV     &kp C_VOL_DN   &kp C_NEXT     &none          &none
          &sys_reset    &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none          &none          &kp C_MUTE     &none          &none          &sys_reset
                                             &none         &none          &none         &none          &none         &none
                        >;
                };
                mouse_layer {
// ╭───────┬───────┬───────┬───────┬───────┬───────╮     ╭───────┬───────┬───────┬───────┬───────┬───────╮
// |       |  ESC  |       |       |       |       |     | SC_UP | SC_LT | MV_UP | SC_RT |       |       |
// |       |  LGUI |  LALT | LSHFT | LCTRL |       |     | SC_DN | MV_LT | MV_DN | MV_RT |       |       |
// |       |       |       |       |       |       |     |       |       |       |       |       |       |
// ╰───────┴───────┴───────┼───────┼───────┼───────┤     ├───────┼───────┼───────┼───────────────────────╯
//                         |       |       |       |     |  RCLK |  LCLK |       |
//                         ╰───────┴───────┴───────╯     ╰───────┴───────┴───────╯
                        bindings = <
          &none         &kp ESC        &none          &none          &none          &none          &msc SCRL_UP     &msc SCRL_LEFT   &mmv MOVE_UP   &msc SCRL_RIGHT   &none          &none
          &none         &kp LGUI       &kp LALT       &kp LSHFT      &kp LCTRL      &none          &msc SCRL_DOWN   &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &none          &none
          &none         &none          &none          &none          &none          &none          &none            &none            &none          &none             &none          &none
                                             &none         &none          &none         &mkp RCLK      &mkp LCLK     &none
                        >;
                };
        };
};
